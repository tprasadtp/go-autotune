# SPDX-FileCopyrightText: Copyright 2024 Prasad Tengse
# SPDX-License-Identifier: MIT

# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: build
on:
  push:
    branches:
      - "**"
  pull_request:
  workflow_dispatch:

permissions: {}

jobs:
  test:
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        runs-on:
          - macos-latest
          - ubuntu-22.04
          - windows-2022
          - windows-2019
        go:
          - stable
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Go ${{ matrix.go }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Install Task
        run: go install github.com/go-task/task/v3/cmd/task@latest

      - name: Test
        run: task --verbose test
        env:
          DEBUG: 1

      - name: Coverage View Percent
        run: go tool covdata percent -i .gocover

      - uses: actions/upload-artifact@v4
        id: coverage-artifact
        with:
          name: ${{ format('go-coverage-{0}-go-{1}', matrix.runs-on, matrix.go) }}
          path: .gocover
          retention-days: 30

  # Only run if
  # - Event is a push event
  # - If pull request is created by author who is either owner, or colalborator
  #   or member of the organization or pull request created by dependabot.
  test-extended-platforms:
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && (github.event.pull_request.author_association == 'OWNER' ||  github.event.pull_request.author_association == 'COLLABORATOR' || github.event.pull_request.author_association == 'MEMBER' || github.event.pull_request.user.login == 'dependabot[bot]' )) }}
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        runs-on:
          - ubuntu-latest
        go:
          - stable
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Go ${{ matrix.go }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Install Task
        run: go install github.com/go-task/task/v3/cmd/task@latest

      - name: Test
        run: task --verbose test
        env:
          DEBUG: 1

      - name: Coverage View Percent
        run: go tool covdata percent -i .gocover

      - uses: actions/upload-artifact@v4
        id: coverage-artifact
        with:
          name: ${{ format('go-coverage-{0}-go-{1}', matrix.runs-on, matrix.go) }}
          path: .gocover
          retention-days: 30

  # Generate coverage profile from all coverage data.
  coverage:
    runs-on: ubuntu-latest
    needs:
      - test
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Download and merge coverage data
        uses: actions/download-artifact@v4
        with:
          path: .gocover
          pattern: go-coverage-*
          merge-multiple: true

      - name: Coverage View Percent
        run: go tool covdata percent -i .gocover

      - name: Create Coverage Profile
        run: go tool covdata textfmt -i .gocover -o .gocover/coverage.out

      - name: View Coverage Profile
        run: go tool cover -func .gocover/coverage.out

      - name: Create Coverage Profile (HTML)
        run: go tool cover -html .gocover/coverage.out -o .gocover/coverage.html

      - uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: .gocover
          retention-days: 30

  example-images-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      index-digest: ${{ steps.index-digest.outputs.digest }}
      digests-list-json: ${{ steps.digests-list-json.outputs.json }}
    steps:
      - name: Checkoutte
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install Task
        run: go install github.com/go-task/task/v3/cmd/task@latest

      - name: Install Ko
        uses: ko-build/setup-ko@v0.6

      - name: Install crane
        run: go install github.com/google/go-containerregistry/cmd/crane@latest

      - name: Build Images
        run: >-
          task
          --verbose
          --output=group
          --output-group-begin "::group::{{.TASK_GROUP_NAME}}"
          --output-group-end "::endgroup::"
          example-images-build
        env:
          EXAMPLE_IMAGE: ${{ vars.EXAMPLE_IMAGE }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Images
        if: github.event_name == 'push' && github.ref_name == github.event.repository.default_branch
        run: task --verbose example-images-push
        env:
          TAG_LATEST: ${{ github.ref_name == github.event.repository.default_branch && 'true' || 'false' }}
          EXAMPLE_IMAGE: ${{ vars.EXAMPLE_IMAGE }}

      - name: Get Index Digest
        if: github.event_name == 'push' && github.ref_name == github.event.repository.default_branch
        shell: bash
        id: index-digest
        run: |
          set -eo pipefail
          echo "digest=$(crane digest ${{vars.EXAMPLE_IMAGE}}:${{github.sha}})" >> "$GITHUB_OUTPUT"

      - name: Get Digests of Index and Manifests
        if: github.event_name == 'push' && github.ref_name == github.event.repository.default_branch
        shell: bash
        id: digests-list-json
        run: |
          set -eo pipefail
          crane digest ${{vars.EXAMPLE_IMAGE}}@${{steps.index-digest.outputs.digest}} > digests.txt
          crane manifest ${{vars.EXAMPLE_IMAGE}}@${{steps.index-digest.outputs.digest}} |jq -r '.manifests| .[] | .digest' >> digests.txt
          echo "json=$(jq -Mcn --arg v "$(cat digests.txt)" '{digest:$v|split("\n")}')" >> "$GITHUB_OUTPUT"

  example-images-sign:
    permissions:
      contents: read
      actions: read
      packages: write
      id-token: write
    if: github.event_name == 'push' && github.ref_name == github.event.repository.default_branch
    runs-on: ubuntu-latest
    needs:
      - test
      - test-extended-platforms
      - example-images-build
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign Images
        run: >-
          cosign sign
          --yes
          --recursive
          --oidc-provider=github-actions
          ${{ vars.EXAMPLE_IMAGE }}@${{ needs.example-images-build.outputs.index-digest }}

  example-images-provenance:
    if: github.event_name == 'push' && github.ref_name == github.event.repository.default_branch
    needs:
      - test
      - test-extended-platforms
      - example-images-build
    permissions:
      contents: read
      actions: read
      id-token: write
      packages: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.example-images-build.outputs.digests-list-json) }}
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ${{ vars.EXAMPLE_IMAGE }}
      digest: ${{ matrix.digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  example-images-verification:
    if: github.event_name == 'push' && github.ref_name == github.event.repository.default_branch
    needs:
      - example-images-build
      - example-images-sign
      - example-images-provenance
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.example-images-build.outputs.digests-list-json) }}
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Install SLSA verifier
        uses: slsa-framework/slsa-verifier/actions/installer@v2.5.1

      - name: Verify SLSA Provenance
        run: >-
          slsa-verifier
          --source-uri github.com/${{ github.repository }}
          verify-image ${{ vars.EXAMPLE_IMAGE }}@${{matrix.digest}}

      - name: Verify Cosign Signature
        run: >-
          cosign verify ${{ vars.EXAMPLE_IMAGE }}@${{matrix.digest}}
          --certificate-identity-regexp "^https://github.com/${{ github.repository }}"
          --certificate-oidc-issuer "https://token.actions.githubusercontent.com"
          --certificate-github-workflow-repository "${{ github.repository }}"
          --certificate-github-workflow-sha ${{ github.sha }}
